services:
  base:
    &base # yaml anchor for reuse
    image: ghcr.io/bjoernellens1/go1-ros-melodic/go1:base
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        ROS_DISTRO: "melodic"
        UNDERLAY_WS: "/go1_ws"
      target: base
      x-bake:
        platforms:
          #- linux/arm64
          - linux/amd64
    stdin_open: true
    tty: true
    network_mode: host
    ipc: host
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
      - DISPLAY
      - QT_X11_NO_MITSHM=1
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - capabilities: [gpu]
    #           count: all
    devices:
      - "/dev/dri:/dev/dri" # intel graphics card acceleration
    restart: unless-stopped

  overlay:
    &overlay
    <<: *base # using the base service as a template
    image: ghcr.io/bjoernellens1/go1-ros-melodic/go1:overlay
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: overlay
      platforms:
        - linux/arm64
        - linux/amd64
      args:
        ROS_DISTRO: "melodic"
        UNDERLAY_WS: "/go1_ws"
        OVERLAY_WS: "/overlay_ws"
    volumes:
      - .:/repo
    environment:
      - UNDERLAY_WS="/go1_ws"
      - OVERLAY_WS="/overlay_ws"
    command: /bin/bash

  guis:
    <<: *overlay # using the overlay service as a template
    image: ghcr.io/bjoernellens1/go1-ros-melodic/go1:guis
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: guis
      platforms:
        - linux/arm64
        - linux/amd64
      args:
        ROS_DISTRO: "melodic"
        UNDERLAY_WS: "/go1_ws"
    command: /bin/bash

  ################################################################################################################################
  # ROS1 Master service                                                                                                          #
  ################################################################################################################################
  ros_master:
    <<: *base # using the base service as a template
    environment:
      - UNDERLAY_WS="/go1_ws"
      - OVERLAY_WS="/overlay_ws"
    command: >
      roscore
    restart: always


  ###################################################################################################################################
  # Webgui control                                                                                                                  #
  ###################################################################################################################################
  olivetin:
    container_name: olivetin
    image: jamesread/olivetin
    user: root
    privileged: true
    volumes:
      - ./config/olivetin/:/config/ # here is config.yaml and icons located
      - ./config/olivetin/icons:/var/www/olivetin/customIcons
      - .:/repo
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - caddy_network
    ports:
      - "1337:1337"
    restart: always

  ################################################################################################################################
  # This section is mostly for supervision from PC                                                                               #
  ################################################################################################################################

  # Foxglove Studio Bridge
  foxglove_bridge:
    <<: *overlay # using the overlay service as a template
    command: >
      roslaunch --screen foxglove_bridge foxglove_bridge.launch port:=8765

  foxglove:
    #image: husarion/foxglove
    image: husarion/foxglove:studio-nightly
    restart: unless-stopped
    depends_on:
      - foxglove_bridge
    networks:
      - caddy_network
    ports:
      - 8080:8080
    volumes:
      - ./config/foxglove/extensions:/src/extensions
      - ./config/foxglove/foxglove-layout.json:/foxglove/default-layout.json

################################################################################################################################
# Core Services for Web Management                                                                                             #
################################################################################################################################
  caddy:
    image: caddy:latest
    networks:
      - caddy_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./config/caddy/content:/usr/share/caddy/
    restart: always
    depends_on:
      - foxglove
      - olivetin
  roscore:
    image: husarion/ros1-bridge:foxy-0.9.6-20230327-stable
    command: |
      bash -c "source /opt/ros/noetic/setup.bash && roscore"
    network_mode: host
    environment:
      - ROS_DOMAIN_ID=5
    restart: always
  ros1bridge:
    image: husarion/ros1-bridge:foxy-0.9.6-20230327-stable
    command: |
      ros2 run ros1_bridge dynamic_bridge
    network_mode: host
    ipc: host
    environment:
      - ROS_DOMAIN_ID=5
      - RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
    restart: always
  webui-joystick:
    image: husarion/webui-ros-joystick:noetic-0.0.1-20230510-stable
    network_mode: host
    # networks:
    #   - caddy_network
    # ports:
    #   - 8000:8000
    ipc: host
    environment:
      - ROS_DOMAIN_ID=5
    restart: always
    depends_on:
      - ros1bridge
    command: roslaunch webui-ros-joystick webui.launch

################################################################################################################################
# Ouster Lidar related extra stuff                                                                                             #
################################################################################################################################
  ouster:
    &ouster
    <<: *base # using the base service as a template
    image: ghcr.io/bjoernellens1/go1-ros-melodic/go1:ouster
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: ouster
      platforms:
        - linux/arm64
        - linux/amd64
      args:
        ROS_DISTRO: "melodic"
        UNDERLAY_WS: "/go1_ws"
        OVERLAY_WS: "/overlay_ws"
    volumes:
      - .:/repo
    command: >
      bash -c "source devel/setup.bash &&
      roslaunch ouster_ros driver.launch sensor_hostname:=169.254.41.35 viz:=false"
    environment:
      - UNDERLAY_WS="/go1_ws"
      - OVERLAY_WS="/overlay_ws"

################################################################################################################################
# Intel Realsense related extra stuff                                                                                          #
################################################################################################################################
  realsense:
    &realsense
    <<: *base # using the base service as a template
    image: ghcr.io/bjoernellens1/go1-ros-melodic/go1:realsense
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: realsense
      platforms:
        - linux/arm64
        - linux/amd64
      args:
        ROS_DISTRO: "melodic"
        UNDERLAY_WS: "/go1_ws"
        OVERLAY_WS: "/overlay_ws"
    volumes:
      - .:/repo
    devices:
      - "/dev/HID-SENSOR-2000e1.4.auto:/dev/HID-SENSOR-2000e1.4.auto"
      # - "/dev/iio:device0:/dev/iio:device0"
      # - "/dev/iio:device1:/dev/iio:device1"
      - "/dev/video0:/dev/video0"
      - "/dev/video1:/dev/video1"
      - "/dev/video2:/dev/video2"
      - "/dev/video3:/dev/video3"
      - "/dev/video4:/dev/video4"
      - "/dev/video5:/dev/video5"
    privileged: true
    environment:
      - UNDERLAY_WS="/go1_ws"
      - OVERLAY_WS="/overlay_ws"
    command: >
      roslaunch realsense2_camera rs_camera.launch

################################################################################################################################
# rosbag recording                                                                                                             #
################################################################################################################################
  rosbag:
    <<: *overlay # using the base service as a template
    volumes:
      - .:/repo
    command: >
      rosbag record --lz4 -a -p -O /repo/rosbags/$(date +%Y%m%d_%H%M%S).bag
    # double check that this is working

################################################################################################################################
# Docker related extra stuff                                                                                                   #
################################################################################################################################
networks:
  caddy_network:
    driver: bridge