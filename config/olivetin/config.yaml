showNavigation: true
logLevel: "INFO"
showNewVersions: false
showFooter: false



# entities:
#   # - file: /etc/OliveTin/containers.json
#   #   name: container

#   - file: /etc/OliveTin/servers.yaml
#     name: server

actions:
  - title: "Start Ouster Lidar"
    shell: "cd /home/go1user/git/go1-ros && docker compose up -d ouster"
    icon: '<img src = "customIcons/lidar.jpg" width = "48px"/>'
  - title: "Stop Ouster Lidar"
    shell: "cd /home/go1user/git/go1-ros && docker compose stop ouster"
    icon: '<img src = "customIcons/lidar_off.jpg" width = "48px"/>'
  - title: "Start Realsense"
    shell: "cd /home/go1user/git/go1-ros && docker compose up -d realsense"
    icon: '<img src = "customIcons/mapping_start.gif" width = "48px"/>'
  - title: "Stop Realsense"
    shell: "cd /home/go1user/git/go1-ros && docker compose stop realsense"
    icon: '<img src = "customIcons/mapping_stop.gif" width = "48px"/>'
  - title: "Record Rosbag"
    shell: "cd /home/go1user/git/go1-ros && docker compose up -d rosbag"
    icon: '<img src = "customIcons/rosbag.png" width = "48px"/>'
  - title: "Stop Rosbag"
    shell: "cd /home/go1user/git/go1-ros && docker compose stop rosbag"
    icon: '<img src = "customIcons/mapping_stop.gif" width = "48px"/>'
  - title: "Stop All Containers"
    shell: "cd /home/go1user/git/go1-ros && docker compose down -v --remove-orphans"
    icon: '<img src = "customIcons/mapping_stop.gif" width = "48px"/>'
  # - title: "Restart Teleop"
  #   icon: '<img src = "customIcons/gamepad.png" width = "48px"/>'
  #   shell: docker restart cps_loki-teleop-1
  - title: Restart or Shutdown System
    icon: restart
    shell: "cd /home/go1user/git/go1-ros && systemctl {{ choice }}" 
    arguments:
      - name: choice
        title: Pick one
        choices:
          - value: reboot
          - value: shutdown
  - title: Check Internet connection
    shell: ping -c 3 1.1.1.1
    icon: ping
    popupOnStart: execution-dialog-stdout-only

  # This uses `popupOnStart: execution-dialog-stdout-only` to simply show just
  # the command output.
  - title: Check disk space
    icon: disk
    shell: df -h /media
    popupOnStart: execution-dialog-stdout-only

  # This uses `popupOnStart: execution-dialog` to show a dialog with more
  # information about the command that was run.
  - title: check dmesg logs
    shell: dmesg | tail
    icon: logs
    popupOnStart: execution-dialog

  # This uses `popupOnStart: execution-button` to display a mini button that
  # links to the logs.
  - title: date
    shell: date
    timeout: 6
    icon: clock
    popupOnStart: execution-button

  # You are not limited to operating system commands, and of course you can run
  # your own scripts. Here `maxConcurrent` stops the script running multiple
  # times in parallel. There is also a timeout that will kill the command if it
  # runs for too long.
  - title: Run backup script
    shell: /opt/backupScript.sh
    shellAfterCompleted: "apprise -t 'Notification: Backup script completed' -b 'The backup script completed with code {{ exitCode}}. The log is: \n {{ stdout }} '"
    maxConcurrent: 1
    timeout: 10
    icon: backup
    popupOnStart: execution-dialog

  # When you want to prompt users for input, that is when you should use
  # `arguments` - this presents a popup dialog and asks for argument values.
  #
  # Docs: https://docs.olivetin.app/action-ping.html
  - title: Ping host
    shell: ping {{ host }} -c {{ count }}
    icon: ping
    timeout: 100
    popupOnStart: execution-dialog-stdout-only
    arguments:
      - name: host
        title: Host
        type: ascii_identifier
        default: example.com
        description: The host that you want to ping

      - name: count
        title: Count
        type: int
        default: 3
        description: How many times to do you want to ping?
  # This will SSH into a server an run the command "echo complete"
  # - title: SSH test
  #   shell: ssh -i /config/ssh/id_rsa -o StrictHostKeyChecking=no go1user@192.168.20.79 "echo complete"
  #   icon: ping
  #   timeout: 5

  # - title: SSH docker start ouster
  #   shell: ssh -i /config/ssh/id_rsa go1user@192.168.20.79 "cd /home/go1user/git/go1-ros && docker compose up ouster"
  #   icon: ping
  #   timeout: 5
  
#   - title: Ping All Servers
#     shell: echo "ping all..."

#   - title: '{{ server.name }} Wake on Lan'
#     shell: 'wol {{ server.name }}'
#     timeout: 10

#   - title: '{{ server.name }} Power Off'
#     shell: 'ssh root@{{ server.name}} "poweroff"'
#     timeout: 10

# # Dashboards are a way of taking actions from the default "actions" view, and
# # organizing them into groups - either into folders, or fieldsets.
# #
# # The only way to properly use entities, are to use them with a `fieldset` on
# # a dashboard.
# dashboards:
#   # Top level items are dashboards.
#   - title: My Servers
#     contents:
#       # On dashboards, all items need to be in a "fieldset". If you don't
#       # specify a fieldset, actions will be assigned to a fieldset with a title
#       # called "default".
#       - title: All Servers
#         type: fieldset
#         contents:
#         # The contents of a dashboard will try to look for an action with a
#         # matching title IF the `contents: ` property is empty.
#         - title: Ping All Servers

#         # If you create an item with some "contents:", OliveTin will show that as
#         # directory.
#         - title: Hypervisors
#           contents:
#             - title: Ping hypervisor1
#             - title: Ping hypervisor2

#       # If you specify `type: fieldset` and some `contents`, it will show your
#       # actions grouped together without a folder.
#       - type: fieldset
#         entity: server
#         title: 'Server: {{ server.hostname }}'
#         contents:
#           # By default OliveTin will look for an action with a matching title
#           # and put it on the dashboard.
#           #
#           # Fieldsets  also support `type: display`, which can display arbitary
#           # text. This is useful for displaying things like a container's state.
#           - type: display
#             title: |
#               Hostname: <strong>{{ server.name }}</strong>
#               IP Address: <strong>{{ server.ip }}</strong>

#           # These are the actions (defined above) that we want on the dashboard.
#           - title: '{{ server.name }} Wake on Lan'
#           - title: '{{ server.name }} Power Off'
